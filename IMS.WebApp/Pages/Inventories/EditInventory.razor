@page "/editinventory/{invId:int}"

@inject IEditInventoryUseCase EditInventoryUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject NavigationManager NavigationManager

<h3>Edit Inventory</h3>
<br />

<EditForm Model="inventory"> <!-- onValidSubmit="SaveInventory" this didn't work!! -->
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name"
                   @bind-Value="inventory.InventoryName"
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
                     @bind-Value="inventory.Quantity"
                     class="form-control">
        </InputNumber>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
                     @bind-Value="inventory.Price"
                     class=form-control>
        </InputNumber>
    </div>

    <br />
    <button type="button" class="btn btn-primary" @onclick="SaveInventory">Update</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>

</EditForm>
@code {
    [Parameter]
    public int InvId { get; set; }

    private Inventory inventory = new Inventory();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInventoryByIdUseCase.ExecuteAsync(InvId);
    }

    private async Task SaveInventory()
    {
        await EditInventoryUseCase.ExecuteAsync(this.inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
